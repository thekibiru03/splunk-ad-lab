---
- name: Create SOAR user and group
  ansible.builtin.user:
    name: "{{ soar_user }}"
    system: yes
    state: present

- name: Create SOAR installation directory
  ansible.builtin.file:
    path: "{{ soar_home }}"
    state: directory
    owner: "{{ soar_user }}"
    group: "{{ soar_user }}"
    mode: '0755'

- name: Check if SOAR installer exists locally
  ansible.builtin.stat:
    path: "{{ soar_local_installer_path }}"
  register: soar_installer_stat
  delegate_to: localhost
  become: false

- name: Download SOAR installer if it does not exist
  ansible.builtin.get_url:
    url: "{{ soar_installer_url }}"
    dest: "{{ soar_local_installer_path }}"
  when: not soar_installer_stat.stat.exists
  delegate_to: localhost
  become: false

- name: Copy and Unarchive Splunk SOAR installer
  ansible.builtin.unarchive:
    src: "{{ soar_local_installer_path }}"
    dest: "/tmp"
    remote_src: no
  become: true

- name: Prepare SOAR installation
  ansible.builtin.command:
    cmd: /tmp/splunk-soar/soar-prepare-system --splunk-soar-home {{ soar_home }} --no-prompt
  become: true
  environment:
    http_proxy: ""
    https_proxy: ""

- name: Run SOAR installation
  ansible.builtin.command:
    cmd: /tmp/splunk-soar/soar-install --splunk-soar-home {{ soar_home }} --no-prompt --ignore-warnings 
  become_user: "{{ soar_user }}"
  args:
    creates: "{{ soar_home }}/bin/phsvc"

- name: Wait for SOAR to be ready
  ansible.builtin.uri:
    url: "https://localhost:8443"
    method: GET
    validate_certs: no
  register: soar_health_check
  until: soar_health_check.status == 200 or soar_health_check.status == 302
  retries: 30
  delay: 10
  ignore_errors: yes

- name: Display SOAR access information
  ansible.builtin.debug:
    msg: |
      SOAR installation completed!
      Access SOAR at: https://192.168.56.30:8443
      Default credentials: soar_local_admin/password (change on first login)